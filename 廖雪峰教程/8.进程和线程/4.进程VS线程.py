# -*- coding: utf-8 -*-
# @Time    : 2019-07-17  10:14
# @File    : 4.进程VS线程.py
# @Author  : 啊啊
'''
第四节 进程和线程
多进程的稳定性比较高，但是创建进程的代价太大。
多线程缺点任何一个线程挂了会导致程序崩溃。
无论是多进程还是多线程，只要数量一多，效率肯定上不去。

计算密集型 VS IO密集型
计算密集型任务的特点是要进行大量的计算，消耗CPU资源，
比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。
这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，
CPU执行任务的效率就越低，所以，要最高效地利用CPU，
计算密集型任务同时进行的数量应当等于CPU的核心数。
计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。
Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。
对于计算密集型任务，最好用C语言编写。

IO密集型涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，
任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。
对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。
适合使用python编写。

异步IO
单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。

'''





